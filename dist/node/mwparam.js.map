{"version":3,"sources":["../../src/mwparam.ts"],"names":["Parameter","defaultValue","Content","form","defaultExp","paramName","Syntax","constructor","name","def","TypeError","default","undefined","toString","Form","new","Optional","Quantitier","LAZY","Template","paramValue","templateName","Symbol","iterator","toStringTag","TemplateParams","params","length","Array","isArray","named","raw","unnamed","registry","forEach","value","val","push","map","key","clear","delete","removed","index","i","indexOf","splice","callbackfn","thisArg","call","get","getAll","target","res","has","set","clean","dirty","size","entries","keys","values","export","exportUnnamed","exportRaw","content","ZeroMore"],"mappings":";;AAAA;;;;AAUA,MAAMA,SAAiB,GAAG,CAAC,MAAM;AAAA;;AAC7B,QAAMC,YAAY,GAAGC,mBAAQC,IAAK,IAAlC;AACA,QAAMC,UAAU,GAAGF,mBAAQC,IAAK,QAAOF,YAAa,EAApD;AACA,QAAMI,SAAS,GAAGH,mBAAQC,IAAK,IAA/B;AAEA,0BAAO,MAAMH,SAAN,SAAwBM,iBAAxB,CAA+B;AAUlCC,IAAAA,WAAW,CAACC,IAAD,EAAeC,GAAf,EAAuC;AAC9C,UAAG,OAAOD,IAAP,KAAgB,QAAnB,EAA6B;AAAE,cAAM,IAAIE,SAAJ,CAAc,qBAAd,CAAN;AAA6C;;AAE5E;AAEA,WAAKF,IAAL,GAAYA,IAAZ;AACA,WAAKG,OAAL,GAAeF,GAAG,KAAKG,SAAR,GAAoB,IAApB,GAA2B,IAAIV,kBAAJ,CAAYO,GAAZ,CAA1C;AACH;;AAEDI,IAAAA,QAAQ,GAAG;AACP,aAAQ,MAAK,KAAKL,IAAK,GAAE,KAAKG,OAAL,GAAgB,IAAG,KAAKA,OAAQ,EAAhC,GAAoC,EAAG,KAAhE;AACH;;AArBiC,GAAtC,oCAC6BG,gBAAKC,GAAI,SAAQV,SAAU,MAAK,IAAIW,mBAAJ,CACrDZ,UADqD,EAErDa,sBAAWC,IAF0C,CAGvD,uBAJN;AAuBH,CA5ByB,GAA1B;;AA+BA,MAAMC,QAAgB,GAAG,CAAC,MAAM;AAAA;;AAAA;;AAC5B,QAAMd,SAAS,GAAGH,mBAAQC,IAAK,IAA/B;AACA,QAAMiB,UAAU,GAAGlB,mBAAQC,IAAK,IAAhC;AACA,QAAMkB,YAAY,GAAGnB,mBAAQC,IAAK,IAAlC;AAH4B,qBAmLrBmB,MAAM,CAACC,QAnLc;AAAA,wBAqOvBD,MAAM,CAACE,WArOgB;;AAc5B,QAAMC,cAAN,SAA6BnB,iBAA7B,CAAoC;AAWhCC,IAAAA,WAAW,CAAC,GAAGmB,MAAJ,EAA+B;AACtC;;AADsC,qCAFlC,KAEkC;;AAAA,iDA4MnB,QA5MmB;;AAGtC,UAAGA,MAAM,CAACC,MAAP,KAAkB,CAAlB,IAAwBC,KAAK,CAACC,OAAN,CAAcH,MAAM,CAAC,CAAD,CAApB,KAA4B,EAAEA,MAAM,CAAC,CAAD,CAAN,YAAqBxB,kBAAvB,CAAvD,EAAyFwB,MAAM,GAAGA,MAAM,CAAC,CAAD,CAAf;AAEzF,YAAMI,KAA4C,GAAG,EAArD;AAEA,WAAKC,GAAL,GAAW,EAAX;AACA,WAAKC,OAAL,GAAe,EAAf;AACA,WAAKC,QAAL,GAAgB,EAAhB;AAECP,MAAAA,MAAD,CAAmBQ,OAAnB,CAA4BC,KAAD,IAAW;AAClC,YAAG,OAAOA,KAAP,KAAiB,QAApB,EAA8B;AAC1B,gBAAMC,GAAG,GAAG,IAAIlC,kBAAJ,CAAYiC,KAAZ,CAAZ;AACA,eAAKJ,GAAL,CAASM,IAAT,CAAcD,GAAd;AACA,eAAKJ,OAAL,CAAaK,IAAb,CAAkBD,GAAlB;AACA,eAAKH,QAAL,CAAc,KAAKD,OAAL,CAAaL,MAAb,GAAsB,CAApC,IAAyCS,GAAzC;AACH,SALD,MAKO,IAAGD,KAAK,YAAYjC,kBAApB,EAA6B;AAChC,eAAK6B,GAAL,CAASM,IAAT,CAAcF,KAAd;AACA,eAAKH,OAAL,CAAaK,IAAb,CAAkBF,KAAlB;AACA,eAAKF,QAAL,CAAc,KAAKD,OAAL,CAAaL,MAAb,GAAsB,CAApC,IAAyCQ,KAAzC;AACH,SAJM,MAIA,IAAGP,KAAK,CAACC,OAAN,CAAcM,KAAd,CAAH,EAAyB;AAC5BA,UAAAA,KAAK,GAAGA,KAAK,CAACG,GAAN,CAAUH,KAAK,IAAI;AACvB,gBAAG,OAAOA,KAAP,KAAiB,QAApB,EAA8B,OAAO,IAAIjC,kBAAJ,CAAYiC,KAAZ,CAAP,CAA9B,KACK,OAAOA,KAAP;AACR,WAHO,CAAR;AAIA,eAAKJ,GAAL,CAASM,IAAT,CAAc,GAAGF,KAAjB;AACAL,UAAAA,KAAK,CAACO,IAAN,CAAW,GAAGF,KAAd;AACH,SAPM,MAOA,IAAG,OAAOA,KAAP,KAAiB,QAApB,EAA8B;AACjC,eAAI,MAAMI,GAAV,IAAiBJ,KAAjB,EAAwB;AACpB,gBAAIC,GAAG,GAAGD,KAAK,CAACI,GAAD,CAAf;AACA,gBAAG,EAAEH,GAAG,YAAYlC,kBAAjB,CAAH,EAA8BkC,GAAG,GAAG,IAAIlC,kBAAJ,CAAYkC,GAAZ,CAAN;AAC9B,iBAAKL,GAAL,CAASM,IAAT,CAAc,CAACE,GAAD,EAAMH,GAAN,CAAd;AACAN,YAAAA,KAAK,CAACO,IAAN,CAAW,CAACE,GAAD,EAAMH,GAAN,CAAX;AACH;AACJ,SAPM,MAOA,MAAM,IAAI1B,SAAJ,CAAc,sBAAd,CAAN;AACV,OAzBD;AA2BAoB,MAAAA,KAAK,CAACI,OAAN,CAAc,CAAC,CAACK,GAAD,EAAMJ,KAAN,CAAD,KAAkB;AAC5B,YAAG,OAAOA,KAAP,KAAiB,QAApB,EAA8BA,KAAK,GAAG,IAAIjC,kBAAJ,CAAYiC,KAAZ,CAAR;AAC9B,aAAKF,QAAL,CAAcM,GAAd,IAAqBJ,KAArB;AACH,OAHD;AAIH;;AAEDK,IAAAA,KAAK,GAAS;AACV,WAAKT,GAAL,GAAW,EAAX;AACA,WAAKC,OAAL,GAAe,EAAf;AACA,WAAKC,QAAL,GAAgB,EAAhB;AACH;;AAEDQ,IAAAA,MAAM,CAACF,GAAD,EAAgC;AAClC,UAAIG,OAAO,GAAG,KAAd;;AAEA,WAAI,IAAIC,KAAK,GAAG,CAAhB,EAAmBA,KAAK,GAAG,KAAKZ,GAAL,CAASJ,MAApC,EAA4CgB,KAAK,EAAjD,EAAqD;AACjD,cAAMR,KAAK,GAAG,KAAKJ,GAAL,CAASY,KAAT,CAAd;;AACA,YAAGR,KAAK,YAAYjC,kBAApB,EAA6B;AACzB,gBAAM0C,CAAC,GAAG,KAAKZ,OAAL,CAAaa,OAAb,CAAqBV,KAArB,CAAV;;AACA,cAAGI,GAAG,IAAIK,CAAV,EAAa;AACT,iBAAKb,GAAL,CAASe,MAAT,CAAgBH,KAAhB,EAAuB,CAAvB;AACA,iBAAKX,OAAL,CAAac,MAAb,CAAoBF,CAApB,EAAuB,CAAvB;AACA,mBAAO,KAAKX,QAAL,CAAcM,GAAd,CAAP;AACAG,YAAAA,OAAO,GAAG,IAAV;AACH;AACJ,SARD,MAQO,IAAGd,KAAK,CAACC,OAAN,CAAcM,KAAd,CAAH,EAAyB;AAC5B,cAAGI,GAAG,IAAIJ,KAAK,CAAC,CAAD,CAAf,EAAoB;AAChB,iBAAKJ,GAAL,CAASe,MAAT,CAAgBH,KAAhB,EAAuB,CAAvB;AACA,mBAAO,KAAKV,QAAL,CAAcM,GAAd,CAAP;AACAG,YAAAA,OAAO,GAAG,IAAV;AACH;AACJ;AACJ;;AAED,aAAOA,OAAP;AACH;;AAEDR,IAAAA,OAAO,CACHa,UADG,EAMHC,OANG,EAOC;AACJ,WAAI,MAAM,CAACT,GAAD,EAAMJ,KAAN,CAAV,IAA0B,IAA1B,EAAgCY,UAAU,CAACE,IAAX,CAAgBD,OAAhB,EAAyBb,KAAzB,EAAgCI,GAAhC,EAAqC,IAArC;AACnC;;AAEDW,IAAAA,GAAG,CAACX,GAAD,EAAgC;AAC/B,aAAO,KAAKN,QAAL,CAAcM,GAAd,CAAP;AACH;;AAEDY,IAAAA,MAAM,CAACC,MAAD,EAAqC;AACvC,YAAMC,GAAG,GAAG,EAAZ;;AAEA,WAAI,MAAM,CAACd,GAAD,EAAMJ,KAAN,CAAV,IAA0B,IAA1B,EAAgC,IAAGI,GAAG,IAAIa,MAAV,EAAkBC,GAAG,CAAChB,IAAJ,CAASF,KAAT;;AAElD,aAAOkB,GAAP;AACH;;AAEDC,IAAAA,GAAG,CAACf,GAAD,EAAgC;AAC/B,aAAOA,GAAG,IAAI,KAAKN,QAAZ,IAAwBM,GAAG,IAAI,KAAKP,OAA3C;AACH;;AAEDuB,IAAAA,GAAG,CAAChB,GAAD,EAAuBJ,KAAvB,EAAuCqB,KAAK,GAAG,CAAC,KAAKC,KAArD,EAAkE;AACjE,UAAGD,KAAH,EAAU;AACN,aAAI,IAAIb,KAAK,GAAG,CAAhB,EAAmBA,KAAK,GAAG,KAAKZ,GAAL,CAASJ,MAApC,EAA4CgB,KAAK,EAAjD,EAAqD;AACjD,gBAAMR,KAAK,GAAG,KAAKJ,GAAL,CAASY,KAAT,CAAd;;AACA,cAAG,EAAER,KAAK,YAAYjC,kBAAnB,KAA+B0B,KAAK,CAACC,OAAN,CAAcM,KAAd,CAAlC,EAAwD;AACpD,gBAAGI,GAAG,IAAIJ,KAAK,CAAC,CAAD,CAAf,EAAoB;AAChB,mBAAKJ,GAAL,CAASe,MAAT,CAAgBH,KAAhB,EAAuB,CAAvB;AACA,qBAAO,KAAKV,QAAL,CAAcM,GAAd,CAAP;AACH;AACJ;AACJ;AACJ;;AAED,WAAKR,GAAL,CAASM,IAAT,CAAc,CAACE,GAAD,EAAMJ,KAAN,CAAd;AACA,WAAKF,QAAL,CAAcM,GAAd,IAAqBJ,KAArB;AAEA,aAAO,IAAP;AACH;;AAEDE,IAAAA,IAAI,CAACF,KAAD,EAAiBqB,KAAK,GAAG,CAAC,KAAKC,KAA/B,EAA8C;AAC9C,WAAK1B,GAAL,CAASM,IAAT,CAAcF,KAAd;AACA,YAAMQ,KAAK,GAAG,KAAKX,OAAL,CAAaK,IAAb,CAAkBF,KAAlB,CAAd;;AAEA,UAAGqB,KAAH,EAAU;AACN,cAAMjB,GAAG,GAAGI,KAAZ;;AACA,aAAI,IAAIA,KAAK,GAAG,CAAhB,EAAmBA,KAAK,GAAG,KAAKZ,GAAL,CAASJ,MAApC,EAA4CgB,KAAK,EAAjD,EAAqD;AACjD,gBAAMR,KAAK,GAAG,KAAKJ,GAAL,CAASY,KAAT,CAAd;;AACA,cAAGR,KAAK,YAAYjC,kBAApB,EAA6B;AACzB,kBAAM0C,CAAC,GAAG,KAAKZ,OAAL,CAAaa,OAAb,CAAqBV,KAArB,CAAV;;AACA,gBAAGI,GAAG,IAAIK,CAAV,EAAa;AACT,mBAAKb,GAAL,CAASe,MAAT,CAAgBH,KAAhB,EAAuB,CAAvB;AACA,mBAAKX,OAAL,CAAac,MAAb,CAAoBF,CAApB,EAAuB,CAAvB;AACA,qBAAO,KAAKX,QAAL,CAAcM,GAAd,CAAP;AACH;AACJ,WAPD,MAOO,IAAGX,KAAK,CAACC,OAAN,CAAcM,KAAd,CAAH,EAAyB;AAC5B,gBAAGI,GAAG,IAAIJ,KAAK,CAAC,CAAD,CAAf,EAAoB;AAChB,mBAAKJ,GAAL,CAASe,MAAT,CAAgBH,KAAhB,EAAuB,CAAvB;AACA,qBAAO,KAAKV,QAAL,CAAcM,GAAd,CAAP;AACH;AACJ;AACJ;AACJ;;AAED,WAAKN,QAAL,CAAcU,KAAd,IAAuBR,KAAvB;AAEA,aAAOQ,KAAP;AACH;;AAEO,QAAJe,IAAI,GAAW;AACf,aAAO,KAAK3B,GAAL,CAASJ,MAAhB;AACH;;AAED,0BAAoE;AAChE,aAAO,KAAKgC,OAAL,EAAP;AACH;;AAEQ,KAAPA,OAAO,GAAiD;AACtD,WAAI,MAAMxB,KAAV,IAAmB,KAAKJ,GAAxB,EAA6B;AACzB,YAAGI,KAAK,YAAYjC,kBAApB,EAA6B,MAAM,CAAC,KAAK6B,GAAL,CAASc,OAAT,CAAiBV,KAAjB,CAAD,EAA0BA,KAA1B,CAAN,CAA7B,KACK,IAAGP,KAAK,CAACC,OAAN,CAAcM,KAAd,CAAH,EAAyB,MAAM,CAAC,GAAGA,KAAJ,CAAN;AACjC;AACJ;;AAEK,KAAJyB,IAAI,GAAsC;AACxC,WAAI,MAAMzB,KAAV,IAAmB,KAAKJ,GAAxB,EAA6B;AACzB,YAAGI,KAAK,YAAYjC,kBAApB,EAA6B,MAAM,KAAK6B,GAAL,CAASc,OAAT,CAAiBV,KAAjB,CAAN,CAA7B,KACK,IAAGP,KAAK,CAACC,OAAN,CAAcM,KAAd,CAAH,EAAyB,MAAMA,KAAK,CAAC,CAAD,CAAX;AACjC;AACJ;;AAEO,KAAN0B,MAAM,GAA8B;AAClC,WAAI,MAAM1B,KAAV,IAAmB,KAAKJ,GAAxB,EAA6B;AACzB,YAAGI,KAAK,YAAYjC,kBAApB,EAA6B,MAAMiC,KAAN,CAA7B,KACK,IAAGP,KAAK,CAACC,OAAN,CAAcM,KAAd,CAAH,EAAyB,MAAMA,KAAK,CAAC,CAAD,CAAX;AACjC;AACJ;;AAED2B,IAAAA,MAAM,GAA+B;AACjC,aAAO,EAAE,GAAG,KAAK7B;AAAV,OAAP;AACH;;AAED8B,IAAAA,aAAa,GAAc;AACvB,aAAO,CAAC,GAAG,KAAK/B,OAAT,CAAP;AACH;;AAEDgC,IAAAA,SAAS,GAAgD;AACrD,aAAO,KAAKjC,GAAL,CAASO,GAAT,CAAcH,KAAD,IAAW;AAC3B,YAAGA,KAAK,YAAYjC,kBAApB,EAA6B,OAAOiC,KAAP;AAC7B,YAAGP,KAAK,CAACC,OAAN,CAAcM,KAAd,CAAH,EAAyB,OAAO,CAAC,GAAGA,KAAJ,CAAP;AAC5B,OAHM,CAAP;AAIH;;AAEDtB,IAAAA,QAAQ,GAAG;AACP,UAAIoD,OAAO,GAAG,EAAd;;AACA,WAAI,IAAI9B,KAAR,IAAiB,KAAKJ,GAAtB,EAA2B;AACvB,cAAMQ,GAAG,GAAGJ,KAAK,YAAYjC,kBAAjB,GAA2B,IAA3B,GAAkCiC,KAAK,CAAC,CAAD,CAAnD;AACAA,QAAAA,KAAK,GAAGA,KAAK,CAAC,CAAD,CAAb;AACA8B,QAAAA,OAAO,IAAK,IAAG1B,GAAG,GAAI,GAAEA,GAAI,GAAV,GAAe,EAAG,GAAEJ,KAAM,EAA5C;AACH;;AACD,aAAO8B,OAAP;AACH;;AArN+B;;AAdR,kBActBxC,cAdsB,YAeRX,gBAAKC,GAAI,WAAUV,SAAU,YAAWe,UAAW,EAf3C;;AAwO5B,4BAAO,MAAMD,QAAN,CAAe;AAgBlBZ,IAAAA,WAAW,CAACC,IAAD,EAAe,GAAGkB,MAAlB,EAA6C;AACpD,UAAG,OAAOlB,IAAP,KAAgB,QAAnB,EAA6B,MAAM,IAAIE,SAAJ,CAAc,oBAAd,CAAN;AAE7B,WAAKF,IAAL,GAAYA,IAAZ;AACA,WAAKkB,MAAL,GAAc,IAAID,cAAJ,CAAmB,GAAGC,MAAtB,CAAd;AACH;;AAEDb,IAAAA,QAAQ,GAAG;AACP,aAAQ,KAAI,KAAKL,IAAK,GAAE,KAAKkB,MAAO,IAApC;AACH;;AAzBiB,GAAtB,qCAC6BZ,gBAAKC,GAAI,QAAOM,YAAa,GAAE,IAAI6C,mBAAJ,CACpDzC,cADoD,EAQpDR,sBAAWC,IARyC,CAStD,OAVN;AA2BH,CAnQwB,GAAzB;;AAsQA;AACA","sourcesContent":["import {\r\n    FormExp,\r\n    Form,\r\n    Optional,\r\n    Quantitier,\r\n    Content,\r\n    Syntax,\r\n    ZeroMore,\r\n} from './parsorama.ts';\r\n\r\nconst Parameter: Syntax = (() => {\r\n    const defaultValue = Content.form`.*`;\r\n    const defaultExp = Content.form`\\|\\s*${defaultValue}`;\r\n    const paramName = Content.form`.*`;\r\n\r\n    return class Parameter extends Syntax {\r\n        static format: FormExp = Form.new`{{{\\s*${paramName}\\s*${new Optional(\r\n            defaultExp,\r\n            Quantitier.LAZY,\r\n        )}(?:\\s*\\|\\s*.*)*\\s*}}}`;\r\n\r\n        name: string;\r\n\r\n        default?: Content | null;\r\n\r\n        constructor(name: string, def?: Content | string) {\r\n            if(typeof name !== 'string') { throw new TypeError('올바른 변수명이 지정되지 않았습니다'); }\r\n\r\n            super();\r\n            \r\n            this.name = name;\r\n            this.default = def === undefined ? null : new Content(def);\r\n        }\r\n\r\n        toString() {\r\n            return `{{{${this.name}${this.default ? `|${this.default}` : ''}}}}`;\r\n        }\r\n    };\r\n})();\r\ntype Parameter = typeof Parameter;\r\n\r\nconst Template: Syntax = (() => {\r\n    const paramName = Content.form`.*`;\r\n    const paramValue = Content.form`.*`;\r\n    const templateName = Content.form`.*`;\r\n\r\n    type Params = Array<\r\n        | {\r\n              [key: string]: string | Content;\r\n          }\r\n        | [string | Content]\r\n        | string\r\n        | Content\r\n    >;\r\n\r\n    class TemplateParams extends Syntax {\r\n        static format = Form.new`\\s*|\\s*(${paramName}\\s*=\\s*)?${paramValue}`;\r\n\r\n        protected raw: ([string | number, Content] | Content)[];\r\n\r\n        protected unnamed: Content[];\r\n\r\n        protected registry: { [key: string]: Content };\r\n\r\n        dirty = false;\r\n\r\n        constructor(...params: Params | [Params]) {\r\n            super();\r\n\r\n            if(params.length === 1 && (Array.isArray(params[0]) && !(params[0] instanceof Content))) params = params[0];\r\n\r\n            const named: [string | number, string | Content][] = [];\r\n\r\n            this.raw = [];\r\n            this.unnamed = [];\r\n            this.registry = {};\r\n\r\n            (params as Params).forEach((value) => {\r\n                if(typeof value === 'string') {\r\n                    const val = new Content(value);\r\n                    this.raw.push(val);\r\n                    this.unnamed.push(val);\r\n                    this.registry[this.unnamed.length - 1] = val;\r\n                } else if(value instanceof Content) {\r\n                    this.raw.push(value);\r\n                    this.unnamed.push(value);\r\n                    this.registry[this.unnamed.length - 1] = value;\r\n                } else if(Array.isArray(value)) {\r\n                    value = value.map(value => {\r\n                        if(typeof value === 'string') return new Content(value);\r\n                        else return value;\r\n                    });\r\n                    this.raw.push(...value);\r\n                    named.push(...value);\r\n                } else if(typeof value === 'object') {\r\n                    for(const key in value) {\r\n                        let val = value[key];\r\n                        if(!(val instanceof Content)) val = new Content(val);\r\n                        this.raw.push([key, val]);\r\n                        named.push([key, val]);\r\n                    }\r\n                } else throw new TypeError('파라미터에 잘못된 값이 입력되었습니다');\r\n            });\r\n\r\n            named.forEach(([key, value]) => {\r\n                if(typeof value === 'string') value = new Content(value);\r\n                this.registry[key] = value;\r\n            });\r\n        }\r\n\r\n        clear(): void {\r\n            this.raw = [];\r\n            this.unnamed = [];\r\n            this.registry = {};\r\n        }\r\n\r\n        delete(key: string | number): boolean {\r\n            let removed = false;\r\n\r\n            for(let index = 0; index < this.raw.length; index++) {\r\n                const value = this.raw[index];\r\n                if(value instanceof Content) {\r\n                    const i = this.unnamed.indexOf(value);\r\n                    if(key == i) {\r\n                        this.raw.splice(index, 1);\r\n                        this.unnamed.splice(i, 1);\r\n                        delete this.registry[key];\r\n                        removed = true;\r\n                    }\r\n                } else if(Array.isArray(value)) {\r\n                    if(key == value[0]) {\r\n                        this.raw.splice(index, 1);\r\n                        delete this.registry[key];\r\n                        removed = true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return removed;\r\n        }\r\n\r\n        forEach(\r\n            callbackfn: (\r\n                value: Content,\r\n                key: string | number,\r\n                context: this,\r\n            ) => void,\r\n            thisArg?: unknown,\r\n        ): void {\r\n            for(const [key, value] of this) callbackfn.call(thisArg, value, key, this);\r\n        }\r\n\r\n        get(key: string | number): Content {\r\n            return this.registry[key];\r\n        }\r\n\r\n        getAll(target: string | number): Content[] {\r\n            const res = [];\r\n\r\n            for(const [key, value] of this) if(key == target) res.push(value);\r\n\r\n            return res;\r\n        }\r\n\r\n        has(key: string | number): boolean {\r\n            return key in this.registry || key in this.unnamed;\r\n        }\r\n\r\n        set(key: string | number, value: Content, clean = !this.dirty): this {\r\n            if(clean) {\r\n                for(let index = 0; index < this.raw.length; index++) {\r\n                    const value = this.raw[index];\r\n                    if(!(value instanceof Content) && Array.isArray(value)) {\r\n                        if(key == value[0]) {\r\n                            this.raw.splice(index, 1);\r\n                            delete this.registry[key];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.raw.push([key, value]);\r\n            this.registry[key] = value;\r\n\r\n            return this;\r\n        }\r\n\r\n        push(value: Content, clean = !this.dirty): number {\r\n            this.raw.push(value);\r\n            const index = this.unnamed.push(value);\r\n\r\n            if(clean) {\r\n                const key = index;\r\n                for(let index = 0; index < this.raw.length; index++) {\r\n                    const value = this.raw[index];\r\n                    if(value instanceof Content) {\r\n                        const i = this.unnamed.indexOf(value);\r\n                        if(key == i) {\r\n                            this.raw.splice(index, 1);\r\n                            this.unnamed.splice(i, 1);\r\n                            delete this.registry[key];\r\n                        }\r\n                    } else if(Array.isArray(value)) {\r\n                        if(key == value[0]) {\r\n                            this.raw.splice(index, 1);\r\n                            delete this.registry[key];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.registry[index] = value;\r\n\r\n            return index;\r\n        }\r\n\r\n        get size(): number {\r\n            return this.raw.length;\r\n        }\r\n\r\n        * [Symbol.iterator](): IterableIterator<[string | number, Content]> {\r\n            yield* this.entries();\r\n        }\r\n\r\n        * entries(): IterableIterator<[string | number, Content]> {\r\n            for(const value of this.raw) {\r\n                if(value instanceof Content) yield [this.raw.indexOf(value), value as Content];\r\n                else if(Array.isArray(value)) yield [...value] as [string | number, Content];\r\n            }\r\n        }\r\n\r\n        * keys(): IterableIterator<string | number> {\r\n            for(const value of this.raw) {\r\n                if(value instanceof Content) yield this.raw.indexOf(value);\r\n                else if(Array.isArray(value)) yield value[0] as string | number;\r\n            }\r\n        }\r\n\r\n        * values(): IterableIterator<Content> {\r\n            for(const value of this.raw) {\r\n                if(value instanceof Content) yield value;\r\n                else if(Array.isArray(value)) yield value[1] as Content;\r\n            }\r\n        }\r\n\r\n        export(): { [key: string]: Content } {\r\n            return { ...this.registry };\r\n        }\r\n\r\n        exportUnnamed(): Content[] {\r\n            return [...this.unnamed];\r\n        }\r\n\r\n        exportRaw(): Array<[string | number, Content] | Content> {\r\n            return this.raw.map((value) => {\r\n                if(value instanceof Content) return value;\r\n                if(Array.isArray(value)) return [...value as [string | number, Content]];\r\n            }) as (Content | [string | number, Content])[];\r\n        }\r\n\r\n        toString() {\r\n            let content = '';\r\n            for(let value of this.raw) {\r\n                const key = value instanceof Content ? null : value[0];\r\n                value = value[1];\r\n                content += `|${key ? `${key}=` : ''}${value}`;\r\n            }\r\n            return content;\r\n        }\r\n\r\n        [Symbol.toStringTag] = 'Params';\r\n    }\r\n\r\n    return class Template {\r\n        static format: FormExp = Form.new`{{\\s*${templateName}${new ZeroMore(\r\n            TemplateParams as {\r\n                new (...args: unknown[]): Syntax;\r\n                format: FormExp;\r\n                parseTree(tree: Content): Syntax;\r\n                parse(content: string): Syntax;\r\n\r\n            },\r\n            Quantitier.LAZY,\r\n        )}\\s*}}`;\r\n\r\n        name: string;\r\n\r\n        params: TemplateParams;\r\n\r\n        constructor(name: string, ...params: Params | [Params]) {\r\n            if(typeof name !== 'string') throw new TypeError('올바른 이름이 지정되지 않았습니다');\r\n\r\n            this.name = name;\r\n            this.params = new TemplateParams(...params);\r\n        }\r\n\r\n        toString() {\r\n            return `{{${this.name}${this.params}}}`;\r\n        }\r\n    } as Syntax;\r\n})();\r\ntype Template = typeof Template;\r\n\r\n// eslint-disable-next-line no-debugger\r\ndebugger;\r\n"],"file":"mwparam.js"}
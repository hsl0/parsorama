{"version":3,"sources":["webpack://parsorama/webpack/bootstrap","webpack://parsorama/./src/parsorama.ts","webpack://parsorama/webpack/runtime/define property getters","webpack://parsorama/webpack/runtime/hasOwnProperty shorthand","webpack://parsorama/webpack/runtime/make namespace object","webpack://parsorama/./src/web.js"],"names":["FormExp","Quantitier","__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","Error","parse","part","content","Repeat","Any","RegExp","match","Form","Array","arr","isArray","length","super","push","TypeError","tree","Content","this","slice","str","exp","index","raw","form","min","max","quantitier","count","toString","Optional","OneMore","Infinity","ZeroMore","Min","Max","Set","forms","iterator","err","message","Reflect","construct","args","join","format","parseTree","new","Syntax","window","parsorama"],"mappings":"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","file":"web.js","sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","export type FormExp = Form | RegExp | string | Repeat | Any | SyntaxConstructor;\r\n\r\nclass InternalError extends Error {\r\n  constructor(...arr) {\r\n    super(...arr);\r\n    this.name = 'ParsoramaInternalError';\r\n  }\r\n}\r\n\r\nnamespace FormExp {\r\n    export function parse(part: FormExp, content: string): string|Syntax {\r\n        if(part instanceof Repeat) return part.parse(content);\r\n        \r\n        if(part instanceof Any) return part.parse(content);\r\n        \r\n        if(part instanceof Object && 'parse' in part) return part.parse(content);\r\n        \r\n        if(typeof part === 'string') {\r\n            part = new RegExp(`^${part}`);\r\n            return (content.match(part as RegExp) as string[])[0];\r\n        }\r\n    }\r\n}\r\n\r\nexport class Form extends Array <FormExp> {\r\n    constructor(...arr: FormExp[] | [FormExp[]]) {\r\n        if (Array.isArray(arr[0]) && arr.length === 1) arr = arr[0];\r\n\r\n        super();\r\n        super.push(...arr as FormExp[]);\r\n    }\r\n\r\n    parse(content: string): Content {\r\n        if(typeof content !== 'string') throw new TypeError('Content is not string');\r\n\r\n        const tree = new Content();\r\n\r\n        for(const part of this) {\r\n            const match = FormExp.parse(part, content)\r\n            tree.push(match);\r\n            content = content.slice((match as string).length);\r\n        }\r\n\r\n        return tree;\r\n    }\r\n\r\n    static new(str: TemplateStringsArray, ...exp: FormExp[]): Form {\r\n        const arr = [];\r\n\r\n        for (let index = 0; index < str.raw.length; index++) {\r\n            arr.push(str.raw[index]);\r\n            if (index in exp) arr.push(exp[index]);\r\n        }\r\n\r\n        return new this(arr);\r\n    }\r\n}\r\n\r\nexport enum Quantitier {\r\n    GREEDY,\r\n    LAZY\r\n}\r\n\r\nexport class Repeat {\r\n    min: number;\r\n    max: number;\r\n    content: FormExp;\r\n    quantitier: Quantitier;\r\n\r\n    constructor(form: FormExp, min: number, max: number, quantitier: Quantitier) {\r\n        this.content = form;\r\n        this.min = min || 0;\r\n        this.max = max || min;\r\n        this.quantitier = quantitier;\r\n    }\r\n    \r\n    parse(content: string, count = 0): string|Content {\r\n        if(count >= this.max) return content;\r\n        \r\n        const match: Syntax | string = FormExp.parse(this.content, content);\r\n        \r\n        if(count < this.min) throw new TypeError(\"Given content doesn't match with format\");\r\n        \r\n        content = content.slice(match.toString().length);\r\n        \r\n        if(typeof match === 'string') return match + this.parse(content, ++count);\r\n        else new Content(match, ...this.parse(content, ++count));\r\n    }\r\n}\r\nexport class Optional extends Repeat {\r\n    constructor(form: FormExp, quantitier: Quantitier) {\r\n        super(form, 0, 1, quantitier);\r\n    }\r\n}\r\nexport {\r\n    Optional as ZeroOne\r\n};\r\nexport class OneMore extends Repeat {\r\n    constructor(form: FormExp, quantitier: Quantitier) {\r\n        super(form, 1, Infinity, quantitier);\r\n    }\r\n}\r\nexport class ZeroMore extends Repeat {\r\n    constructor(form: FormExp, quantitier: Quantitier) {\r\n        super(form, 0, Infinity, quantitier);\r\n    }\r\n}\r\nexport class Min extends Repeat {\r\n    constructor(form: FormExp, min: number, quantitier: Quantitier) {\r\n        super(form, min, Infinity, quantitier);\r\n    }\r\n}\r\nexport class Max extends Repeat {\r\n    constructor(form: FormExp, max: number, quantitier: Quantitier) {\r\n        super(form, 0, max, quantitier);\r\n    }\r\n}\r\n\r\nexport class Any extends Set {\r\n    constructor(...forms: FormExp[] | [Iterable<FormExp>]) {\r\n        try {\r\n            // @ts-expect-error Iterable<FormExp> can't be assigned to readonly any[]\r\n            super((forms.length === 1 && forms[0][Symbol.iterator]) ? forms[0] : forms);\r\n        } catch (err) {\r\n            if (err instanceof TypeError && err.message === \"Constructor Set requires 'new'\") {\r\n                return Reflect.construct(Set, [(forms.length === 1 && forms[0][Symbol.iterator]) ? forms[0] : forms], new.target);\r\n            }\r\n        }\r\n    }\r\n    \r\n    parse(content: string) {\r\n        for(const form of this) {\r\n            const match = FormExp.parse(form, content);\r\n            if(match) return match;\r\n        }\r\n        throw new TypeError(\"Given content doesn't match with format\")\r\n    }\r\n}\r\n\r\nexport class Content extends Array {\r\n    constructor(...args: unknown[]) {\r\n        super();\r\n        if (Array.isArray(args[0]) && args.length === 1) args === args[0];\r\n        super.push(...args);\r\n    }\r\n\r\n    toString(): string {\r\n        return this.join('');\r\n    }\r\n\r\n    static form(...args: [TemplateStringsArray, ...FormExp[]] | FormExp[]): SyntaxConstructor {\r\n        return class extends this {\r\n            static format = (args[0] as TemplateStringsArray).raw ? Form.new(...args as[TemplateStringsArray, ...FormExp[]]) : new Form(...args as FormExp[]);\r\n\r\n            static parseTree: (tree: Content) => Syntax;\r\n            static parse(content: string): Syntax {\r\n                if (!(this.format instanceof Form)) this.format = new Form(this.format);\r\n                return this.parseTree((this.format as Form).parse(content));\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\nexport abstract class Syntax {\r\n    static format: FormExp;\r\n\r\n    static parseTree: (tree: Content) => Syntax;\r\n    static parse(content: string): Syntax {\r\n        if(!(this.format instanceof Form)) this.format = new Form(this.format);\r\n        return this.parseTree((this.format as Form).parse(content));\r\n    }\r\n}\r\ninterface SyntaxConstructor {\r\n    new (...args: unknown[]): Syntax;\r\n    format: FormExp;\r\n    parseTree(tree: Content): Syntax;\r\n    parse(content: string): Syntax;\r\n}\r\n\r\n// eslint-disable-next-line no-debugger\r\ndebugger;","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import * as parsorama from \"./parsorama\";\r\nwindow.parsorama = parsorama;"],"sourceRoot":""}
{"version":3,"sources":["webpack://parsorama/webpack/bootstrap","webpack://parsorama/./src/parsorama.ts","webpack://parsorama/webpack/runtime/define property getters","webpack://parsorama/webpack/runtime/hasOwnProperty shorthand","webpack://parsorama/webpack/runtime/make namespace object","webpack://parsorama/./src/web.js"],"names":["Quantitier","__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","Form","Array","arr","isArray","length","super","push","content","TypeError","tree","Content","part","this","RegExp","body","String","match","slice","str","exp","index","raw","Repeat","form","min","max","quantitier","Optional","OneMore","Infinity","ZeroMore","Min","Max","Any","Set","forms","iterator","err","message","Reflect","construct","args","join","format","new","window","parsorama"],"mappings":"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","file":"web.js","sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","export type FormExp = Form | RegExp | string | Repeat | Any | Syntax;\r\n\r\nexport class Form extends Array<FormExp> {\r\n    constructor(...arr: FormExp[] | [FormExp[]]) {\r\n        if(Array.isArray(arr[0]) && arr.length === 1) arr = arr[0];\r\n\r\n        super();\r\n        super.push(...arr as FormExp[]);\r\n    }\r\n\r\n    parse(content: string): Content {\r\n        if(typeof content !== 'string') throw new TypeError('Content is not string');\r\n\r\n        const tree = new Content();\r\n\r\n        for(let part of this) {\r\n            if(typeof part === 'string') part = new RegExp(`^${part}`);\r\n            else if(part instanceof RegExp) {\r\n                const body = String(part).match(/^\\/(.*)\\/(\\w*)$/);\r\n                part = new RegExp(`^${body[1]}`);\r\n            } else throw new TypeError('Wrong form expression included');\r\n\r\n            const match = (content.match(part) as string[])[0];\r\n\r\n            tree.push(match);\r\n            content = content.slice(match.length);\r\n        }\r\n\r\n        return tree;\r\n    }\r\n\r\n    static new(str: TemplateStringsArray, ...exp: FormExp[]): Form {\r\n        const arr = [];\r\n\r\n        for(let index = 0; index < str.raw.length; index++) {\r\n            arr.push(str.raw[index]);\r\n            if(index in exp) arr.push(exp[index]);\r\n        }\r\n\r\n        return new this(arr);\r\n    }\r\n}\r\n\r\nexport enum Quantitier {GREEDY, LAZY}\r\n\r\nexport class Repeat {\r\n    min: number;\r\n    max: number;\r\n    content: FormExp;\r\n    quantitier: Quantitier;\r\n\r\n    constructor(form: FormExp, min: number, max: number, quantitier: Quantitier) {\r\n        this.content = form;\r\n        this.min = min || 0;\r\n        this.max = max || min;\r\n        this.quantitier = quantitier;\r\n    }\r\n}\r\nexport class Optional extends Repeat {\r\n    constructor(form: FormExp, quantitier: Quantitier) {\r\n        super(form, 0, 1, quantitier);\r\n    }\r\n}\r\nexport {Optional as ZeroOne};\r\nexport class OneMore extends Repeat {\r\n    constructor(form: FormExp, quantitier: Quantitier) {\r\n        super(form, 1, Infinity, quantitier);\r\n    }\r\n}\r\nexport class ZeroMore extends Repeat {\r\n    constructor(form: FormExp, quantitier: Quantitier) {\r\n        super(form, 0, Infinity, quantitier);\r\n    }\r\n}\r\nexport class Min extends Repeat {\r\n    constructor(form: FormExp, min: number, quantitier: Quantitier) {\r\n        super(form, min, Infinity, quantitier);\r\n    }\r\n}\r\nexport class Max extends Repeat {\r\n    constructor(form: FormExp, max: number, quantitier: Quantitier) {\r\n        super(form, 0, max, quantitier);\r\n    }\r\n}\r\n\r\nexport class Any extends Set {\r\n    constructor(...forms: FormExp[] | [Iterable<FormExp>]) {\r\n        try {\r\n            // @ts-expect-error Iterable<FormExp> can't be assigned to readonly any[]\r\n            super((forms.length === 1 && forms[0][Symbol.iterator])? forms[0] : forms);\r\n        } catch(err) {\r\n            if(err instanceof TypeError && err.message === \"Constructor Set requires 'new'\") {\r\n                return Reflect.construct(Set, [(forms.length === 1 && forms[0][Symbol.iterator]) ? forms[0] : forms], new.target);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport class Content extends Array {\r\n    constructor(...args: unknown[]) {\r\n        super();\r\n        if(Array.isArray(args[0]) && args.length === 1) args === args[0];\r\n        super.push(...args);\r\n    }\r\n\r\n    toString(): string {\r\n        return this.join('');\r\n    }\r\n\r\n    static form(...args: [TemplateStringsArray, ...FormExp[]] | FormExp[]): Syntax {\r\n        return class extends this {\r\n            static format = (args[0] as TemplateStringsArray).raw? Form.new(...args as[TemplateStringsArray, ...FormExp[]]) : new Form(...args as FormExp[]);\r\n        } as Syntax;\r\n    }\r\n}\r\n\r\nexport interface Syntax {\r\n    new(...args: unknown[]);\r\n    format: FormExp;\r\n}\r\n\r\n// eslint-disable-next-line no-debugger\r\ndebugger;","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import * as parsorama from \"./parsorama\";\r\nwindow.parsorama = parsorama;"],"sourceRoot":""}